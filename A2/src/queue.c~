#include <stdio.h>
#include <stdlib.h>

#include "LinkedListAPI.h"
#include "queue.h"
#include "patient.h"

Queue *createQueue(void(*printFunction)(void *toBePrinted), void(*deleteFunction)(void *toBeDeleted), int (*compareFunction)(const void *first, const void *second)) {
  Queue *q = malloc(sizeof(Queue));
  q->list = initializeList(printFunction, deleteFunction, compareFunction);
  return q;
}

void insertSortedQ(Queue *q, void *data) {
  insertSorted(q->list, data);
  q->count++;
}

void pop (Queue *q) {
  int count = getCount(q);

  if (count > 0) {
    deleteNodeFromList(q->list);
    q->count--;
  }

  return;
}

void *peek (Queue *q) {
  void *data;
  int count = getCount(q);

  if (count > 0) {
    data = getFromFront(q->list);
    return data;
  }

return NULL;
}

int getCount (Queue *q) {
  return q->count;
}

void destroy (Queue *q) {
  deleteList(q->list);
}

int comparePatient (const void *first, const void *second) {
  Patient *p1 = (Patient*)first;
  Patient *p2 = (Patient*)second;

  if (p1->priority < p2->priority) {
    return 1;
  }
  else if (p1->priority > p2->priority) {
    return -1;
  }
  else if (p1->priority == p2->priority){
    return 0;
  }
return -2;
}

int compareEntry (const void *first, const void *second) {
  Patient *p1 = (Patient*)first;
  Patient *p2 = (Patient*)second;

  if (p1->entryPlace < p2->entryPlace) {
    return 1;
  }
  else if (p1->entryPlace >= p2->entryPlace) {
    return -1;
  }

return 0;
}

void deletePatient(void *toDelete) {
  Patient *p = (Patient*)toDelete;
  free(p);
}

void printPatient (void *toBePrinted) {
  Patient *p = (Patient*)toBePrinted;
  printf("%s    \t%d\t\t%s\t%d\n", p->clientID, p->priority, p->symptom, p->processTime);
}

