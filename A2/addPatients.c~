#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

#include "addPatients.h"
#include "patient.h"
#include "queue.h"

int originalPatients (FILE *fPtr, Queue *q) {
  char tempArray[100];
  char *clientID;
  char *symptom;
  int priority = 0;
  int processTime = 0;
  int entryPlace = 0;
  Patient *p;

  while (fgets(tempArray, 100, fPtr) != NULL) {
    clientID = malloc(sizeof(char) * 30);
    symptom = malloc(sizeof(char) * 2);
    sscanf(tempArray, "%s %d %s", clientID, &priority, symptom);
    if (strcmp(symptom, "CV") == 0 || strcmp(symptom, "MH") == 0 || strcmp(symptom, "NC") == 0) {
      processTime = 5;
    }
    else if (strcmp(symptom, "GI") == 0 || strcmp(symptom, "SK") == 0) {
      processTime = 2;
    }
    else if (strcmp(symptom, "RC") == 0 || strcmp(symptom, "EC") == 0) {
      processTime = 1;
    }
    else if (strcmp(symptom, "HN") == 0) {
      processTime = 3;
    }
    else if (strcmp(symptom, "EV") == 0) {
      processTime = 10;
    }
    else if (strcmp(symptom, "SA") == 0) {
      processTime = 7;
    }
    else if (strcmp(symptom, "TR") == 0) {
      processTime = 4;
    }
    entryPlace++;
    p = createPatient(clientID, priority, symptom, processTime, entryPlace);
    insertSortedQ(q, p);
  }

return entryPlace;
}


int addNewPatient(Queue *q, int entryPlace) {
  char tempLine[100];
  char *clientID;
  char *symptom;
  int priority = 0, processTime = 0;
  Patient *p;
  clientID = malloc(sizeof(char) * 100);
  symptom = malloc(sizeof(char) * 100);


  printf("Please input patient ID: ");
  fgets(tempLine, 100, stdin);
  while (strcmp(tempLine, "\n") == 0) {
    printf("Invalid Input! Please enter patient ID: ");
    fgets(tempLine, 100, stdin);
  }
  strncpy(clientID, tempLine, strlen(tempLine) - 1);

  printf("Please input priority level: ");
  fgets(tempLine, 100, stdin);
  while (true) {
    if (!isdigit(tempLine[0]) || strlen(tempLine) > 2) {
      printf("Invalid input, must be between 1 and 5! Please try again: ");
      fgets(tempLine, 100, stdin);
    } else {
      priority = atoi(tempLine);
      if (priority == 1 || priority == 2 || priority == 3 || priority == 4 || priority == 5) {
        break;
      } else {
        printf("Invalid Number! Please input priority number: ");
        fgets(tempLine, 100, stdin);
      }
    }
  }

  printf("Please input a valid symptom code: ");
  fgets(symptom, 100, stdin);
  symptom[2] = '\0';
  do {
    if (strcmp(symptom, "CV") == 0 || strcmp(symptom, "MH") == 0 || strcmp(symptom, "NC") == 0) {
        processTime = 5;
     }
    else if (strcmp(symptom, "GI") == 0 || strcmp(symptom, "SK") == 0) {
      processTime = 2;
    }
    else if (strcmp(symptom, "RC") == 0 || strcmp(symptom, "EC") == 0) {
      processTime = 1;
    }
    else if (strcmp(symptom, "HN") == 0) {
      processTime = 3;
    }
    else if (strcmp(symptom, "EV") == 0) {
      processTime = 10;
    }
    else if (strcmp(symptom, "SA") == 0) {
      processTime = 7;
    }
    else if (strcmp(symptom, "TR") == 0) {
      processTime = 4;
    } else {
      printf("Invalid symptom code! Please input again: ");
      fgets(symptom, 100, stdin);
    }
  } while (processTime == 0);
  entryPlace++;
  printf("%d\n", entryPlace);
  p = createPatient(clientID, priority, symptom, processTime, entryPlace);
  printf("%s %d %s %d %d", p->clientID, p->priority, p->symptom, p->processTime, p->entryPlace);
  insertSortedQ(q,p);

return entryPlace;
}
