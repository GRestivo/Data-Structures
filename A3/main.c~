#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>

#include "hashFunction.h"
#include "HashTableAPI.h"
#include "hashData.h"
#include "modifyDictionary.h"
#include "dictionaryFunctions.h"

int main (int argc, char **argv) {
  FILE *fPtr;
  char tempChoice[100];
  int choice = 0, breakCheck = 0, i, j = 0;


  /*Error test to see if there are the correct number of command line arguments, if not end program*/
  if (argc != 2) {
    printf("Error! Incorrect amount of command line arguments!\n");
    return -1;
  }

  /*Opens given file for reading*/
  fPtr = fopen(argv[1], "r");

  /*Sees if file opening was successful, if not end program*/
  if (fPtr == NULL) {
    printf("Error! Could not find designated file.\n");
    return -1;
  }

  size_t tableSize = 26;
  HTable *hTable = createTable(tableSize, &hashFunction, &destroyNodeData, &printKeyData);

  char **string;
  string = malloc(sizeof(char*) * 1000);
  for (i = 0; i < 1000; i++) {
    string[i] = malloc(sizeof(char) * 100);
  }
  i = 0;


  while (fgets(string[j], 100, fPtr) != NULL) {
    int length = strlen(string[j]);
    for (i = 0; i < length; i++) {
      if (string[j][i] == '\n') {
        string[j][i] = '\0';
      }
    }
    strcpy(string[j], toLower(string[j]));
    int tempKey = hashFunction(tableSize, string[j]);
    HashData *d = createHashData(string[j],tempKey);
    insertData(hTable, tempKey, d);
    j++;
  }

  fclose(fPtr);

  while (true) {
    printf("1) Add a word to Dictionary\n");
    printf("2) Remove a word from Dictionary\n");
    printf("3) Spell Check a file\n");
    printf("4) Show Dictionary Words\n");
    printf("5) Quit\n");
    printf("Input choice: ");
    fgets(tempChoice, 100, stdin);
    tempChoice[1] = '\0';
    if (isdigit(tempChoice[0])) {
      choice = atoi(tempChoice);
      if (choice >= 1 && choice <= 5) {
        switch(choice) {
          case 1:
            addWord(hTable);
            break;
          case 2:
            deleteWord(hTable);
            break;
          case 3:
            printf("Spell check\n");
            spellCheck(hTable);
            break;
          case 4:
            printf("Display words\n");
            displayDictionary(hTable);
            break;
          case 5:
            breakCheck = 1;
            break;
        }
      } else {
        printf("Invalid input! Must be a number between 1-5, please try again.\n");
      }
      if (breakCheck == 1) {
        break;
      }
    } else {
      printf("Invalid input! Must be a number between 1-5, please try again.\n");
    }
  }


  for (i = 0; i < 1000; i++) {
    free(string[i]);
  }
  free(string);

return 0;
}
