#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#include "modifyDictionary.h"
#include "hashFunction.h"
#include "HashTableAPI.h"
#include "hashData.h"

void addWord (HTable *hTable) {
  int wordLength, key, i, wordCheck;
  char tempWord[100];
  char *word;

  while (1) {
    wordCheck = 0;
    printf("Please input the word you would like to add to the dictionary: ");
    fgets(tempWord, 100, stdin);
    wordLength = strlen(tempWord);

    for (i = 0; i < wordLength - 1; i++) {
      if (isdigit(tempWord[i])) {
        wordCheck = 1;
      }
    }
    if (strncmp(tempWord, "", wordLength) == 0 || wordCheck == 1) {
        printf("Invalid input! Please input a proper word.\n");
    } else {
      break;
    }
  }
  wordLength = strlen(tempWord);
  for (i = 0; i < wordLength; i++) {
    if (tempWord[i] == '\n') {
      tempWord[i] = '\0';
    }
  }
  tempWord[0] = tolower(tempWord[0]);
  word = malloc(sizeof(char*));
  word = tempWord;
  key = hTable->hashFunction(hTable->size, word);
  printf("%d | %s\n", key, word);
  HashData *d = createHashData(word, key);
  HashData *h = (HashData*)findData(hTable, d);
  if (h == NULL) {
    insertData(hTable, key, d);
    printf("Word successfully added to dictionary.\n");
  } else {
    printf("%d ! %s\n", h->key, h->word);
    printf("Word already exists!\n");
  }

return;
}


void deleteWord (HTable *hTable) {
  int wordLength, key, i, wordCheck;
  char tempWord[100];
  char *word;

  while (1) {
    wordCheck = 0;
    printf("Please input the word you would like to delete from the dictionary: ");
    fgets(tempWord, 100, stdin);
    wordLength = strlen(tempWord);

    for (i = 0; i < wordLength - 1; i++) {
      if (isdigit(tempWord[i])) {
        wordCheck = 1;
      }
    }
    if (strncmp (tempWord, "", wordLength) == 0 || wordCheck == 1) {
      printf("Invalid input! Please input a proper word.\n");
    } else {
      break;
    }
  }

  int length = strlen(tempWord);
  for (i = 0; i < length; i++) {
    if (tempWord[i] == '\n') {
      tempWord[i] = '\0';
    }
  }
  word = tempWord;
  key = hTable->hashFunction(hTable->size,word);
  HashData *h = createHashData(word,key);
  int removeCheck = removeNode(hTable, h);
  if (removeCheck == 1) {
    printf("Word successfully deleted.\n");
  } else {
    printf("Word could not be found.\n");
  }
}
